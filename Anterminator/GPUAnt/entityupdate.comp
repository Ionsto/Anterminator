#version 430
const float dt = 0.02;
const float IntergrationDamping = 0.95;

layout(rg16f,binding = 0) uniform image3D PheremoneHome;
layout(rg16f,binding = 1) uniform image3D PheremoneFood;
layout(rg16f,binding = 2) uniform image3D PheremoneAttack;
layout(rg16f,binding = 3) uniform image3D PheremoneScent;

struct Entity{
	vec2 Position;
	vec2 PositionOld;

	vec2 Acceleration;
	float Size;
	float Alive;

	vec3 Colour;
	float ToRemove;

	float Affiliation;
	float Type;
	float Mass;
	float Age;

	vec2 Heading;
	float Energy;
	float HeldFood;

	float TimeFromHome;
	float Attacked;
	float MaxEnergy;
	float Health;

	float MaxHealth;
	float Queen;
	float IndirectionID;
	float PadC;
};

struct Faction{
	int AntCount;
	int NestCount;
	float TotalEnergy;
	float AntSpawnRate;
	float NestSpawnRate;
};


const int WorldSize = 2048;
const float PheremoneResolution = 4;
const int PheremoneCount = int(floor(2 * WorldSize/PheremoneResolution));
const int MaxEntityCount = 20000;
const int MaxTypeCount = 5;
const int MaxEntityPerChunk = 10;
const int ChunkSize = 8;
const int ChunkCount = 2*WorldSize/ChunkSize;
const int FactionCount = 4;

const float WalkHomeTime = 2;

struct Chunk{
	int EntityCount;
	int EntityID[MaxEntityPerChunk];
};
int GetChunkId(vec2 pos)
{
	ivec2 localpos = ivec2(floor((pos + WorldSize)/ChunkSize));
	return clamp(localpos.y + (localpos.x * ChunkCount),0,ChunkCount * ChunkCount-1); 
}
struct Scene{
	int EntityCount;
	int TypeCount[MaxTypeCount];
//	int IndirectionList[MaxTypeCount][MaxEntityCount];
};

//uniform float WorldSize;       
uniform float RandomTimeSeed;
uniform int ExecutionType;
uniform int EntityCount = 0;

layout (local_size_x = 512) in;

layout(std430, binding = 0) buffer entity_block
{
	Entity EntityList[];
};
layout(std430, binding = 1) buffer render_position_block
{
	vec2 RenderPosition[];
};
layout(std430, binding = 2) buffer render_colour_block
{
	vec4 RenderColour[];
};
layout(std430, binding = 3) buffer render_size_block
{
	float RenderSize[];
};
layout(std430, binding = 4) buffer scene_data 
{
	Scene gpuscene;
};
layout(std430, binding = 5) buffer chunk_data 
{
	Chunk chunks[];
};
layout(std430, binding = 6) buffer faction_data 
{
	Faction factions[];
};
float random (vec2 st) {
    return abs(fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123));
}
float WrapValue(float v)
{
	if(v < -WorldSize)
	{
		v += 2 * WorldSize;
	}
	if(v >= WorldSize)
	{
		v -= 2 * WorldSize;
	}
	return v;
}
float WrapDistance(float v)
{
	if (abs(v) > WorldSize)
	{
		v = (abs(v) - (WorldSize*2)) * sign(v);
	}
	return v;
}
int AddIndirection(int type,int i){
//	if(gpuscene.TypeCount[type] < MaxEntityCount)
//	{
//		int id = atomicAdd(gpuscene.TypeCount[type],1);
//		if(id < MaxEntityCount)
//		{
//			gpuscene.IndirectionList[type][id] = i;
//			return id;	
//		}
//		else{
//			atomicAdd(gpuscene.TypeCount[type],-1);
//		}
//	}
	return -1;	
}
int AddEntity(int type){
	if(gpuscene.EntityCount < MaxEntityCount)
	{
		int id = atomicAdd(gpuscene.EntityCount,1);
		if(id < MaxEntityCount)
		{
//			EntityList[id].IndirectionID = float(AddIndirection(type,id));
			return id;	
		}
		else{
			atomicAdd(gpuscene.EntityCount,-1);
			return -1;	
		}
	}
	return -1;	
}
ivec2 WrapPhermoneGrid(ivec2 pos)
{
	//return pos & (PheremoneCount-1);
	return clamp(pos % PheremoneCount,ivec2(0,0),ivec2(PheremoneCount,PheremoneCount)-1);
}
ivec2 GetPheremoneGrid(vec2 pos)
{
	return ivec2(floor(((pos+WorldSize))/PheremoneResolution));
}
void FollowPhermomon(uint i,layout(rg16f) image3D im,float s) {
	vec2 deltaheading = vec2(0,0);
	for(int x = -1;x <= 1;++x){
		for(int y = -1;y <= 1;++y){
			 deltaheading += imageLoad(im,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) + ivec2(x,y)),int(EntityList[i].Affiliation))).xy * s;
		}
	}
	EntityList[i].Heading += deltaheading;
}
void FollowPhermomonScent(uint i,int type,int detectrange,float s) {
	vec2 Position = EntityList[i].Position;
	vec2 headingdelta = vec2(0,0);
	for(int x = -detectrange;x <= detectrange;++x){
		for(int y = -detectrange;y <= detectrange;++y){
			vec2 SuggestedPos = Position + (vec2(x,y)*PheremoneResolution)
				+ 
				(imageLoad(PheremoneScent,
				ivec3(
				WrapPhermoneGrid(GetPheremoneGrid(Position) + ivec2(x,y))
				,type)
				).xy * s);
				memoryBarrierImage();
				headingdelta += (SuggestedPos - Position);

		}
	}
	EntityList[i].Heading += headingdelta;
	memoryBarrier();
}
void PlacePheremoneScent(uint i,int type,float spreadrange,float s){
	int size = int(ceil(EntityList[i].Size/PheremoneResolution) * spreadrange);
	ivec2 iPosition = GetPheremoneGrid(EntityList[i].Position);
	for(int x = -size;x <= size;++x)
	{
		for(int y = -size;y <= size;++y)
		{
			if(x != 0 || y != 0){
				vec2 v = vec2(-x,-y);
				float dist = length(v);
				vec2 val = imageLoad(PheremoneScent,ivec3(WrapPhermoneGrid(iPosition + ivec2(x,y)),int(type))).xy;
				val += normalize(v.xy) * ((PheremoneResolution * s) / dist);
				imageStore(PheremoneScent,ivec3(WrapPhermoneGrid(iPosition + ivec2(x,y)),int(type)),vec4(val,0,1));
			}
		}
	}
}
void PlacePheremone(uint i,layout(rg16f) image3D ph, vec3 v){
	vec3 val = imageLoad(ph,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xyz;
	val += v;
	imageStore(ph,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation)),vec4(val,1));
}
void RandomWalk(uint i,float speed,float rand){
	if(abs(random(vec2((1 + i) + RandomTimeSeed,0))) < rand){
		EntityList[i].Heading += vec2(random(vec2(i,2 * i) + RandomTimeSeed),random(vec2(i,2 * i) + 9.2 * RandomTimeSeed)) - 0.5;
	}
}
void ApplyBoundaryCondition(uint i){
	for(int j = 0;j < 2;++j)
	{
		if(EntityList[i].Position[j] < -WorldSize)
		{
			EntityList[i].Position[j] += 2 * WorldSize;
			EntityList[i].PositionOld[j] += 2 * WorldSize;
		}
		if(EntityList[i].Position[j] >= WorldSize)
		{
			EntityList[i].Position[j] -= 2 * WorldSize;
			EntityList[i].PositionOld[j] -= 2 * WorldSize;
		}
		if(isinf(EntityList[i].Position[j]) || isnan(EntityList[i].Position[j])){
			EntityList[i].Position[j] = 0;
			EntityList[i].ToRemove = 1;
			EntityList[i].Alive = 0;
		}
		if(isinf(EntityList[i].PositionOld[j]) || isnan(EntityList[i].PositionOld[j])){
			EntityList[i].PositionOld[j] = 0;
			EntityList[i].ToRemove = 1;
			EntityList[i].Alive = 0;
		}
	}
	if(isinf(EntityList[i].Size) || isnan(EntityList[i].Size)){
		EntityList[i].Size = 0;
		EntityList[i].ToRemove = 1;
		EntityList[i].Alive = 0;
	}
	memoryBarrier();
}

void Intergrate(uint i){
	vec2 oldpos = EntityList[i].Position;
	vec2 diff = EntityList[i].Position - EntityList[i].PositionOld;
	diff.x = WrapDistance(diff.x);
	diff.y = WrapDistance(diff.y);
	vec2 v2drag = 0.01 * diff * length(diff);// dot(diff,diff);
					//TODO: Analyse nan
	vec2 Acceleration = EntityList[i].Acceleration;
	if(any(isnan(Acceleration)) || any(isinf(Acceleration))){
		Acceleration = vec2(0,0);
	}
	EntityList[i].Position += ((diff) * IntergrationDamping) - v2drag + (dt * dt * Acceleration);
	EntityList[i].PositionOld = oldpos;
	EntityList[i].Acceleration = vec2(0,0);
	if(any(isnan(EntityList[i].Position)) || any(isinf(EntityList[i].Position))){
		EntityList[i].Position = vec2(0,0);
		EntityList[i].PositionOld = vec2(0,0);
	}
	memoryBarrier();
}
void UpdateRenderData(uint i)
{
	RenderPosition[i] = EntityList[i].Position;
	if(EntityList[i].Type != 4){
		RenderColour[i].xyz = EntityList[i].Colour * clamp(EntityList[i].Health / EntityList[i].MaxHealth,0.1,1.0);
		if(EntityList[i].Alive == 0)
		{
			RenderColour[i].xyz = vec3(0.5,0.5,0.5);
		}
		if(EntityList[i].ToRemove != 1)
		{
			RenderColour[i].w = 1;
		}
		else{
			RenderColour[i].w = 0;
		}
	}
	else{
		RenderColour[i].xyz = EntityList[i].Colour;
	}
	RenderSize[i] = max(0.0,EntityList[i].Size);
}
void UpdateEntity(uint i) {
	float EnergyDecay = 0.98;
	float EnergyDecayLinear = 0.01 * EntityList[i].Size;//* EntityList[i].Size;
	float EnergyDecayLinearBase = 0.05;
	float CurrentEnergy = EntityList[i].Energy;
	CurrentEnergy *= pow(EnergyDecay,dt);
	CurrentEnergy -= EnergyDecayLinear * dt;
	CurrentEnergy -= EnergyDecayLinearBase * dt;
	CurrentEnergy = clamp(CurrentEnergy,0,EntityList[i].MaxEnergy);
	if( EntityList[i].ToRemove != 1){
//		ExecuteBehaviour(i);
	}
	if(EntityList[i].Alive == 1){
		float MaxSpeed = 5;
		float SpeedLookup[] = {
		10,//Ant
		0,//Nest
		10,//Prey
		50//Pred
		};
		if(EntityList[i].Type == 1)
		{
			MaxSpeed = 0;
			EntityList[i].Acceleration = vec2(0,0);
		}
		float EnergyMult = clamp(EntityList[i].Energy / EntityList[i].MaxEnergy,0.3,1.0);
		if(isinf(EnergyMult) || isnan(EnergyMult)){
			EnergyMult = 1;
		}
		MaxSpeed = SpeedLookup[int(EntityList[i].Type)] * EnergyMult;
		if(EntityList[i].Queen == 1)
		{
			MaxSpeed /= 1.5;	
		}
		if(any(isnan(EntityList[i].Heading)) || any(isinf(EntityList[i].Heading))){
			EntityList[i].Heading = vec2(0,0);
		}

		if (dot(EntityList[i].Heading, EntityList[i].Heading) > MaxSpeed * MaxSpeed)
		{
			EntityList[i].Heading = normalize(EntityList[i].Heading) * MaxSpeed;
		}
		float MovmentCostLookup[] = {
		0.01,//Ant
		0,//Nest
		0.02,//Prey
		0.05//Pred
		};
		float HeadingAcc = 10;
		float MovmentCost = MovmentCostLookup[int(EntityList[i].Type)];
		EntityList[i].Energy -= MovmentCost * HeadingAcc * pow(length(EntityList[i].Heading),2) * dt * dt; 
		EntityList[i].Acceleration += EntityList[i].Heading * HeadingAcc;
		EntityList[i].Age -= dt;
		if (EntityList[i].HeldFood <= 0)
		{
			EntityList[i].TimeFromHome += dt;
		}
		//ExecuteBehaviour(i);
		EntityList[i].Attacked = -1;
		if(EntityList[i].Health < EntityList[i].MaxHealth){
			float HealLookup[] = {
			10,//Ant
			100,//Nest
			10,//Prey
			20//Pred
			};
			float HealRate = HealLookup[int(EntityList[i].Type)];
			float dh = HealRate * dt;
			dh = min(EntityList[i].MaxHealth-EntityList[i].Health,dh);
			EntityList[i].Health += dh;
			EntityList[i].Energy -= dh;
		}
	}
	else{
		EntityList[i].Size *= pow(EnergyDecay,dt);
		EntityList[i].Size = max(1,EntityList[i].Size);
	}
	if(EntityList[i].Age <= 0 || EntityList[i].Health <= 0) {
		EntityList[i].Alive = 0;
//		EntityList[i].Energy += E;
	}
	if(EntityList[i].Energy <= 0) {
		EntityList[i].ToRemove = 1;
		EntityList[i].Alive = 0;
	}
//	if(isnan(EntityList[i].Size) || isinf(EntityList[i].Size)){
//		EntityList[i].Size = 1;
//		EntityList[i].Alive = 0;
//		EntityList[i].ToRemove = 1;
//	}
}
void main()
{
    uint i = gl_GlobalInvocationID.x;
	if(gpuscene.EntityCount >= MaxEntityCount)
	{
		gpuscene.EntityCount = MaxEntityCount;
	}

	if(i < gpuscene.EntityCount && i < MaxEntityCount)
	{
		ApplyBoundaryCondition(i);
		if(EntityList[i].Type != 4)
		{
			if(EntityList[i].Type != 1){
				Intergrate(i);
			}
			ApplyBoundaryCondition(i);
		}
		UpdateRenderData(i);
	}
}