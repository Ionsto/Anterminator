#version 430
const float dt = 0.02;
const float IntergrationDamping = 0.95;

struct Entity{
	vec2 Position;
	vec2 PositionOld;

	vec2 Acceleration;
	float Size;
	float Alive;

	vec3 Colour;
	float ToRemove;

	float Affiliation;
	float Type;
	float Mass;
	float Age;

	vec2 Heading;
	float Energy;
	float HeldFood;

	float TimeFromHome;
	float Attacked;
	float MaxEnergy;
	float Health;

	float MaxHealth;
	float Queen;
	float IndirectionID;
	float PadC;
};

struct Faction{
	int AntCount;
	int NestCount;
	float TotalEnergy;
	float AntSpawnRate;
	float NestSpawnRate;
};



const int WorldSize = 2048;
const float PheremoneResolution = 4;
const int MaxEntityCount = 20000;
const int MaxEntityPerChunk = 10;
const int MaxTypeCount = 5;
const int ChunkSize = 8;
const int ChunkCount = 2*WorldSize/ChunkSize;

const float WalkHomeTime = 10;


struct Chunk{
	int EntityCount;
	int EntityID[MaxEntityPerChunk];
};
int GetChunkId(vec2 pos)
{
	ivec2 localpos = ivec2(floor(pos / ChunkSize)) + (ChunkCount/2);
	return clamp(localpos.y + (localpos.x * ChunkCount),0,ChunkCount * ChunkCount - 1); 
}
struct Scene{
	int EntityCount;
	int TypeCount[MaxTypeCount];
};


const int MaxEntitiesPerThread = 10;
layout (local_size_x = 16) in;
layout(std430, binding = 0) buffer entity_block
{
	Entity EntityList[];
};
layout(std430, binding = 4) buffer scene_data 
{
	Scene gpuscene;
};
layout(std430, binding = 6) buffer faction_data 
{
	Faction factions[];
};
float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}
void main()
{
    uint i = gl_GlobalInvocationID.x;
	int EntityCount = gpuscene.EntityCount;
	int Threads = int(ceil(float(EntityCount) / float(MaxEntitiesPerThread)));
	if(i < Threads)
	{
		int minent = int(i) * MaxEntitiesPerThread;	
		for(int j = 0;j < MaxEntitiesPerThread;++j)
		{
			int id = j + minent;
			if(id < gpuscene.EntityCount && id < MaxEntityCount)	
			{
				if(int(EntityList[id].ToRemove) == 1)
				{
					int EndEntity = atomicAdd(gpuscene.EntityCount,-1);	
//					int endind = atomicAdd(gpuscene.TypeCount[int(EntityList[id].Type)],-1);
//					gpuscene.IndirectionList[int(EntityList[i].IndirectionID)] = gpuscene.IndirectionList[endind];
					EntityList[id] = EntityList[EndEntity];
					if(EntityList[id].Type == 0){
						factions[int(EntityList[id].Affiliation)].AntCount--;
					}
					if(EntityList[id].Type == 1){
						factions[int(EntityList[id].Affiliation)].NestCount--;
					}
					id -= 1;
				}
			}
		}
	}
}