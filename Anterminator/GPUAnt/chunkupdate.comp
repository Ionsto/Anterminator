#version 430
const float dt = 0.02;
const float IntergrationDamping = 1.;


struct Entity{
	vec2 Position;
	vec2 PositionOld;

	vec2 Acceleration;
	float Size;
	float Alive;

	vec3 Colour;
	float ToRemove;

	float Affiliation;
	float Type;
	float Mass;
	float Age;

	vec2 Heading;
	float Energy;
	float HeldFood;

	float TimeFromHome;
	float Attacked;
	float MaxEnergy;
	float Health;

	float MaxHealth;
	float Pad;
	float PadB;
	float PadC;
};

const int WorldSize = 2048;
const int MaxEntityPerChunk = 10;
const int MaxTypeCount = 5;
const int MaxEntityCount = 50000;
const int ChunkSize = 8;
const int ChunkCount = 2 * WorldSize/ChunkSize;
struct Chunk{
	int EntityCount;
	int EntityID[MaxEntityPerChunk];
};


int GetChunkId(vec2 pos)
{
	ivec2 localpos = ivec2(floor((pos + WorldSize)/ChunkSize));
	return clamp(localpos.y + (localpos.x * ChunkCount),0,ChunkCount * ChunkCount-1); 
}
struct Scene{
	int EntityCount;
	int TypeCount[MaxTypeCount];
};

const int MaxEntitiesPerThread = 10;

layout (local_size_x = 16) in;
layout(std430, binding = 0) buffer entity_block
{
	Entity EntityList[];
};
layout(std430, binding = 4) buffer scene_data 
{
	Scene gpuscene;
};
layout(std430, binding = 5) buffer chunk_data 
{
	Chunk chunks[];
};
float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}
void UpdateChunks(){
	for(int i = 0;i < gpuscene.EntityCount;++i)
	{
		int chunkid = GetChunkId(EntityList[i].Position);
//		if(chunkid >= 0 && chunkid < ChunkCount * ChunkCount){
		{
			if(chunks[chunkid].EntityCount < MaxEntityPerChunk)
			{
				chunks[chunkid].EntityID[chunks[chunkid].EntityCount] = i;
				chunks[chunkid].EntityCount++;
			}
		}
	}
}
void main()
{
    uint id = gl_GlobalInvocationID.x;
	//ApplyFriction(i);
	//UpdateChunks();
	int EntityCount = gpuscene.EntityCount;
	int Threads = int(ceil(float(EntityCount) / float(MaxEntitiesPerThread)));
	if(id < Threads)
	{
		int minent = int(id) * MaxEntitiesPerThread;	
		for(int j = 0;j < MaxEntitiesPerThread;++j)
		{
			int i = j + minent;
			if(i < EntityCount && i < MaxEntityCount)
			{
				//int chunkid = GetChunkId(EntityList[i].Position);
				//ivec2 cmin = ivec2(floor((EntityList[i].Position - EntityList[i].Size)/ChunkSize)) + (ChunkCount/2);
				//ivec2 cmax = ivec2(floor((EntityList[i].Position + EntityList[i].Size)/ChunkSize)) + (ChunkCount/2);
				if(!any(isnan(EntityList[i].Position)) && !any(isinf(EntityList[i].Position)) && !isnan(EntityList[i].Size) && !isinf(EntityList[i].Size)){
					ivec2 cmin = ivec2(floor((EntityList[i].Position - EntityList[i].Size + WorldSize)/ChunkSize));
					ivec2 cmax = ivec2(ceil((EntityList[i].Position + EntityList[i].Size + WorldSize)/ChunkSize));
					if(true)//(cmin != cmax)
					{
						for (int dx = cmin.x; dx <= cmax.x;++dx)
						{
							for (int dy = cmin.y; dy <= cmax.y;++dy)
							{
								int dxa = dx;
								int dya = dy;
								if(dxa < 0)	{ dxa += ChunkCount;}
								if(dxa >= ChunkCount)	{ dxa -= ChunkCount;}
								if(dya < 0)	{ dya += ChunkCount;}
								if(dya >= ChunkCount)	{ dya -= ChunkCount;}

								int chunkid = dya + (dxa * ChunkCount);	
								chunkid = clamp(chunkid,0,ChunkCount*ChunkCount-1);
	//							if(chunkid >= 0 && chunkid < ChunkCount * ChunkCount)
								{
									if(chunks[chunkid].EntityCount < MaxEntityPerChunk)
									{
										int endid = atomicAdd(chunks[chunkid].EntityCount,1);
										if(endid < MaxEntityPerChunk)
										{
											chunks[chunkid].EntityID[endid] = i;
										}
										else{
											atomicAdd(chunks[chunkid].EntityCount,-1);
										}
		//								chunks[chunkid].EntityCount++;
									}
								}
							}
						}
					}
					else
					{
						int dxa = cmin.x;
						int dya = cmin.y;
						if(dxa < 0)	{ dxa += ChunkCount;}
						if(dxa >= ChunkCount)	{ dxa -= ChunkCount;}
						if(dya < 0)	{ dya += ChunkCount;}
						if(dya >= ChunkCount)	{ dya -= ChunkCount;}

						int chunkid = dya + (dxa * ChunkCount);	
						if(chunkid >= 0 && chunkid < ChunkCount * ChunkCount){
							if(chunks[chunkid].EntityCount < MaxEntityPerChunk)
							{
								int endid = atomicAdd(chunks[chunkid].EntityCount,1);
								chunks[chunkid].EntityID[endid] = i;
							}
						}
					}
				}
			}
		}
	}
}
