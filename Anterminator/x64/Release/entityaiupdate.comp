#version 430
const int AIStepCount = 1;
const float dt = 0.02 * AIStepCount;
const float IntergrationDamping = 0.95;

layout(rg16f,binding = 0) uniform image3D PheremoneHome;
layout(rg16f,binding = 1) uniform image3D PheremoneFood;
layout(rg16f,binding = 2) uniform image3D PheremoneAttack;
layout(rg16f,binding = 3) uniform image3D PheremoneScent;
layout(binding = 5) uniform sampler2D CollisionMap;

struct Entity{
	vec2 Position;
	vec2 PositionOld;

	vec2 Acceleration;
	float Size;
	float Alive;

	vec3 Colour;
	float ToRemove;

	float Affiliation;
	float Type;
	float Mass;
	float Age;

	vec2 Heading;
	float Energy;
	float HeldFood;

	float TimeFromHome;
	float Attacked;
	float MaxEnergy;
	float Health;

	float MaxHealth;
	float Queen;
	float IndirectionID;
	float AudioFlags;
};

struct Faction{
	int AntCount;
	int NestCount;
	float TotalEnergy;
	float AntSpawnRate;
	float NestSpawnRate;
};


const int WorldSize = 2048;
const float PheremoneResolution = 4;
const int PheremoneCount = int(floor(2 * WorldSize/PheremoneResolution));
const int MaxEntityCount = 20000;
const int MaxTypeCount = 4;
const int MaxEntityPerChunk = 10;
const int ChunkSize = 8;
const int ChunkCount = 2*WorldSize/ChunkSize;
const int FactionCount = 4;

const float WalkHomeTime = 2;


struct Chunk{
	int EntityCount;
	int EntityID[MaxEntityPerChunk];
};
int GetChunkId(vec2 pos)
{
	ivec2 localpos = ivec2(floor((pos + WorldSize)/ChunkSize));
	return clamp(localpos.y + (localpos.x * ChunkCount),0,ChunkCount * ChunkCount-1); 
}
struct Scene{
	int EntityCount;
	int TypeCount[MaxTypeCount];
//	int IndirectionList[MaxTypeCount][MaxEntityCount];
};

//uniform float WorldSize;       
uniform float RandomTimeSeed;
uniform int ExecutionType;
uniform int EntityCount = 0;

layout (local_size_x = 512) in;

layout(std430, binding = 0) buffer entity_block
{
	Entity EntityList[];
};
layout(std430, binding = 1) buffer render_position_block
{
	vec2 RenderPosition[];
};
layout(std430, binding = 2) buffer render_colour_block
{
	vec4 RenderColour[];
};
layout(std430, binding = 3) buffer render_size_block
{
	float RenderSize[];
};
layout(std430, binding = 4) buffer scene_data 
{
	Scene gpuscene;
};
layout(std430, binding = 5) buffer chunk_data 
{
	Chunk chunks[];
};
layout(std430, binding = 6) buffer faction_data 
{
	Faction factions[];
};
float random (vec2 st) {
    return abs(fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123));
}
float WrapValue(float v)
{
	if(v < -WorldSize)
	{
		v += 2 * WorldSize;
	}
	if(v >= WorldSize)
	{
		v -= 2 * WorldSize;
	}
	return v;
}
float WrapDistance(float v)
{
	if (abs(v) > WorldSize)
	{
		v = (abs(v) - (WorldSize*2)) * sign(v);
	}
	return v;
}
int AddIndirection(int type,int i){
//	if(gpuscene.TypeCount[type] < MaxEntityCount)
//	{
//		int id = atomicAdd(gpuscene.TypeCount[type],1);
//		if(id < MaxEntityCount)
//		{
//			gpuscene.IndirectionList[type][id] = i;
//			return id;	
//		}
//		else{
//			atomicAdd(gpuscene.TypeCount[type],-1);
//		}
//	}
	return -1;	
}
int AddEntity(int type){
	if(gpuscene.EntityCount < MaxEntityCount)
	{
		int id = atomicAdd(gpuscene.EntityCount,1);
		if(id < MaxEntityCount)
		{
//			EntityList[id].IndirectionID = float(AddIndirection(type,id));
			return id;	
		}
		else{
			atomicAdd(gpuscene.EntityCount,-1);
			return -1;	
		}
	}
	return -1;	
}
ivec2 WrapPhermoneGrid(ivec2 pos)
{
	//return pos & (PheremoneCount-1);
	return clamp(pos % PheremoneCount,ivec2(0,0),ivec2(PheremoneCount,PheremoneCount)-1);
}
ivec2 GetPheremoneGrid(vec2 pos)
{
	return ivec2(floor(((pos+WorldSize))/PheremoneResolution));
}
void FollowPhermomon(uint i,layout(rg16f) image3D im,float s) {
	vec2 deltaheading = vec2(0,0);
	for(int x = -1;x <= 1;++x){
		for(int y = -1;y <= 1;++y){
			 deltaheading += imageLoad(im,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) + ivec2(x,y)),int(EntityList[i].Affiliation))).xy * s;
		}
	}
	EntityList[i].Heading += deltaheading;
}
void FollowPhermomonScent(uint i,int type,int detectrange,float s) {
	vec2 Position = EntityList[i].Position;
	vec2 headingdelta = vec2(0,0);
	for(int x = -detectrange;x <= detectrange;++x){
		for(int y = -detectrange;y <= detectrange;++y){
			float dist = sqrt((x*x)+(y*y))* PheremoneResolution * 0.1;// / float(detectrange);
			vec2 pvec = 
				(imageLoad(PheremoneScent,
				ivec3(
				WrapPhermoneGrid(GetPheremoneGrid(Position) + ivec2(x,y))
				,int(type))
				).xy);
			if(length(pvec) != 0){
				vec2 SuggestedPos = Position + (vec2(x,y)*PheremoneResolution)
					+ (normalize(pvec) * PheremoneResolution); 
					headingdelta += normalize(SuggestedPos - Position) * s * length(pvec) / (1 + dist);
			}
//			float dist = sqrt((x*x)+(y*y))* PheremoneResolution * 0.1;// / float(detectrange);
//			vec2 pheremonevec = (imageLoad(PheremoneScent,
//				ivec3(
//				WrapPhermoneGrid(GetPheremoneGrid(Position) + ivec2(x,y))
//				,type)
//				).xy);
//				memoryBarrierImage();
//				headingdelta += s * pheremonevec / (1 + dist);
		}
	}
	EntityList[i].Heading += headingdelta;
	memoryBarrier();
}
void PlacePheremoneScent(uint i,int type,float spreadrange,float s){
	int size = int(ceil(EntityList[i].Size/PheremoneResolution) * spreadrange);
	ivec2 iPosition = GetPheremoneGrid(EntityList[i].Position);
	vec2 vel = EntityList[i].Position - EntityList[i].PositionOld;
	for(int x = -size;x <= size;++x)
	{
		for(int y = -size;y <= size;++y)
		{
			if(x != 0 || y != 0){
				vec2 v = vec2(-x,-y);
				float dist = length(v);
				vec2 val = imageLoad(PheremoneScent,ivec3(WrapPhermoneGrid(iPosition + ivec2(x,y)),int(type))).xy;
				val += normalize(v.xy) * s / dist;
				imageStore(PheremoneScent,ivec3(WrapPhermoneGrid(iPosition + ivec2(x,y)),int(type)),vec4(val,0,1));
			}
			else{
				imageStore(PheremoneScent,ivec3(WrapPhermoneGrid(iPosition),int(type)),vec4(-vel * s * 1000,0,1));
			}
		}
	}
}
void PlacePheremone(uint i,layout(rg16f) image3D ph, vec3 v){
	vec3 val = imageLoad(ph,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xyz;
	val += v;
	imageStore(ph,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation)),vec4(val,1));
}
void RandomWalk(uint i,float speed,float rand){
	if(abs(random(vec2((1 + i) + RandomTimeSeed,0))) < rand){
		EntityList[i].Heading += vec2(random(vec2(i,2 * i) + RandomTimeSeed),random(vec2(i,2 * i) + 9.2 * RandomTimeSeed)) - 0.5;
	}
}
void ApplyBoundaryCondition(uint i){
	for(int j = 0;j < 2;++j)
	{
		if(EntityList[i].Position[j] < -WorldSize)
		{
			EntityList[i].Position[j] += 2 * WorldSize;
			EntityList[i].PositionOld[j] += 2 * WorldSize;
		}
		if(EntityList[i].Position[j] >= WorldSize)
		{
			EntityList[i].Position[j] -= 2 * WorldSize;
			EntityList[i].PositionOld[j] -= 2 * WorldSize;
		}
		if(isinf(EntityList[i].Position[j]) || isnan(EntityList[i].Position[j])){
			EntityList[i].Position[j] = 0;
			EntityList[i].ToRemove = 1;
			EntityList[i].Alive = 0;
		}
		if(isinf(EntityList[i].PositionOld[j]) || isnan(EntityList[i].PositionOld[j])){
			EntityList[i].PositionOld[j] = 0;
			EntityList[i].ToRemove = 1;
			EntityList[i].Alive = 0;
		}
	}
	if(isinf(EntityList[i].Size) || isnan(EntityList[i].Size)){
		EntityList[i].Size = 0;
		EntityList[i].ToRemove = 1;
		EntityList[i].Alive = 0;
	}
}

void CreateAnt(int i) {
	EntityList[i].Position = vec2(0,0);
	EntityList[i].PositionOld = vec2(0,0);
	EntityList[i].Acceleration = vec2(0,0);
	EntityList[i].Size = 1;
	EntityList[i].Alive = 1;
	EntityList[i].Colour = vec3(1,1,1);
	EntityList[i].ToRemove = 0;
	EntityList[i].Affiliation = 0;
	EntityList[i].Type = 0;
	EntityList[i].Mass = 1;
	EntityList[i].Age = 60;
	EntityList[i].Heading = vec2(0,0);
	EntityList[i].Energy = 50;
	EntityList[i].HeldFood = 0;
	EntityList[i].TimeFromHome = 0;
	EntityList[i].Attacked = -1;
	EntityList[i].MaxEnergy = 50;
	EntityList[i].Health = 5;
	EntityList[i].MaxHealth = 5;
	EntityList[i].Queen = 0;
}
void CreateQueen(int i) {
	EntityList[i].Position = vec2(0,0);
	EntityList[i].PositionOld = vec2(0,0);
	EntityList[i].Acceleration = vec2(0,0);
	EntityList[i].Size = 10;
	EntityList[i].Alive = 1;
	EntityList[i].Colour = vec3(1,1,1);
	EntityList[i].ToRemove = 0;
	EntityList[i].Affiliation = 0;
	EntityList[i].Type = 0;
	EntityList[i].Mass = 10;
	EntityList[i].Age = 30;
	EntityList[i].Heading = vec2(0,0);
	EntityList[i].Energy = 8000;
	EntityList[i].HeldFood = 0;
	EntityList[i].TimeFromHome = 0;
	EntityList[i].Attacked = -1;
	EntityList[i].MaxEnergy = 8000;
	EntityList[i].Health = 10;
	EntityList[i].MaxHealth = 10;
	EntityList[i].Queen = 1;
}
void CreateNest(int i) {
	EntityList[i].Position = vec2(0,0);
	EntityList[i].PositionOld = vec2(0,0);
	EntityList[i].Acceleration = vec2(0,0);
	EntityList[i].Size = 50;
	EntityList[i].Alive = 1;
	EntityList[i].Colour = vec3(1,1,1);
	EntityList[i].ToRemove = 0;
	EntityList[i].Affiliation = 0;
	EntityList[i].Type = 1;
	EntityList[i].Mass = 10000000;
	EntityList[i].Age = 60;
	EntityList[i].Heading = vec2(0,0);
	EntityList[i].Energy = 5000;
	EntityList[i].HeldFood = 0;
	EntityList[i].TimeFromHome = 0;
	EntityList[i].Attacked = -1;
	EntityList[i].MaxEnergy = 100000;
	EntityList[i].MaxHealth = 500;
	EntityList[i].Health = 500;
	EntityList[i].Queen = 0;
}
void CreatePrey(int i) {
	EntityList[i].Position = vec2(0,0);
	EntityList[i].PositionOld = vec2(0,0);
	EntityList[i].Acceleration = vec2(0,0);
	EntityList[i].Size = 5;
	EntityList[i].Alive = 1;
	EntityList[i].Colour = vec3(0,1,0);
	EntityList[i].ToRemove = 0;
	EntityList[i].Affiliation = -1;
	EntityList[i].Type = 2;
	EntityList[i].Mass = 50;
	EntityList[i].Age = 100;
	EntityList[i].Heading = vec2(0,0);
	EntityList[i].HeldFood = 0;
	EntityList[i].TimeFromHome = 0;
	EntityList[i].Attacked = -1;
	EntityList[i].MaxEnergy = 2000;
	EntityList[i].Energy = 1000;
	EntityList[i].MaxHealth = 10;
	EntityList[i].Health = 10;
	EntityList[i].Queen = 0;
}
void CreatePredator(int i) {
	EntityList[i].Position = vec2(0,0);
	EntityList[i].PositionOld = vec2(0,0);
	EntityList[i].Acceleration = vec2(0,0);
	EntityList[i].Size = 40;
	EntityList[i].Alive = 1;
	EntityList[i].Colour = vec3(1,0,0);
	EntityList[i].ToRemove = 0;
	EntityList[i].Affiliation = -2;
	EntityList[i].Type = 3;
	EntityList[i].Mass = 40;
	EntityList[i].Age = 120;
	EntityList[i].Heading = vec2(0,0);
	EntityList[i].Energy = 2000;
	EntityList[i].HeldFood = 0;
	EntityList[i].TimeFromHome = 0;
	EntityList[i].Attacked = -1;
	EntityList[i].MaxEnergy = 50000;
	EntityList[i].MaxHealth = 100;
	EntityList[i].Health = 100;
}



void ExecuteBehaviourAnt(uint i)
{
	if (EntityList[i].Alive == 1 && EntityList[i].Queen == 0)
	{
		
		FollowPhermomonScent(i,2,2,-0.1);
		vec2 dv = (EntityList[i].Position - EntityList[i].PositionOld)/dt;
		if (EntityList[i].HeldFood > 0) {
			//Bring food back to colony
				const float WalkFoodPHLayFood = 0.01 / 10;
				const float WalkFoodRandomSpeed = 10;
				const float WalkFoodPHFollowHome = 10;
				PlacePheremone(i,PheremoneFood,-vec3(dv,0) * WalkFoodPHLayFood * EntityList[i].HeldFood);
				RandomWalk(i,WalkFoodRandomSpeed,0.5);
				FollowPhermomon(i,PheremoneHome,WalkFoodPHFollowHome);
		}
		else {
			if (EntityList[i].TimeFromHome > WalkHomeTime)
			{

				//Walk back to colony
					const float WalkHomeRandomSpeed = 1;
					const float WalkHomePHFollowHome = 1;
					RandomWalk(i,WalkHomeRandomSpeed,0.5);
					FollowPhermomon(i,PheremoneHome,WalkHomePHFollowHome);
//					FollowPhermomon(i,PheremoneAttack,20);
			}
			else {
				//Explore - follow trails
				float PhereStrengthThres = 50;
				float MaxPhere = max(
				max(
				length(imageLoad(PheremoneHome,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xy),
				length(imageLoad(PheremoneFood,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xy)
				),
				length(imageLoad(PheremoneAttack,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xy)
				);
					MaxPhere = min(MaxPhere, 100.0f);
					if (MaxPhere > PhereStrengthThres)
					{
							EntityList[i].TimeFromHome -= dt * 0.5 * MaxPhere;
							EntityList[i].TimeFromHome = max(0.0f, EntityList[i].TimeFromHome);
					}
					float LayHome = 0.1;
					float FollowFood = 1;
					float FollowHome = 1;
					RandomWalk(i,100,0.5);
					PlacePheremone(i,PheremoneHome,-vec3(dv,0) * LayHome);
					FollowPhermomon(i,PheremoneFood,FollowFood);
					FollowPhermomon(i,PheremoneHome,-FollowHome);
					FollowPhermomon(i,PheremoneAttack,100);
					FollowPhermomonScent(i,0,5,10);
			
					//Reprop attack
					vec3 val = imageLoad(PheremoneAttack,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xyz;
					val *= 1.001;
					imageStore(PheremoneAttack,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation)),vec4(val,1));
			}
		}
	}
	if (EntityList[i].Alive == 1 && EntityList[i].Queen == 1)
	{
		RandomWalk(i,50,0.5);
		FollowPhermomon(i,PheremoneHome,-1000);
		FollowPhermomon(i,PheremoneAttack,10);
		vec2 dir = EntityList[i].Position - EntityList[i].PositionOld;
		PlacePheremone(i,PheremoneAttack,vec3(dir,0) * 500);
		if(length(imageLoad(PheremoneHome,ivec3(GetPheremoneGrid(EntityList[i].Position),int(EntityList[i].Affiliation))).xy) < 50){
			EntityList[i].Age = 0;
		}
	}
	if(EntityList[i].Age <= 0 && EntityList[i].Energy > 0 && EntityList[i].Queen == 1)
	{
		if(!any(isinf(EntityList[i].Position)) && !any(isnan(EntityList[i].Position))){
			int id = AddEntity(2);
			if(id != -1)
			{
				float ang = random(vec2(i,2 * i) + RandomTimeSeed) * 3.14 * 2;
				float dist = 3 + (2*abs(random(vec2(i * 3,2 * i) + 9.2 * RandomTimeSeed)));
				vec2 displacement = vec2(cos(ang),sin(ang)) * dist * EntityList[i].Size;
				CreateNest(id);
				memoryBarrier();
				EntityList[id].Position = EntityList[i].Position;
				EntityList[id].PositionOld = EntityList[i].Position;// - (dt * displacement * 0.1);
				EntityList[id].Affiliation = EntityList[i].Affiliation;
				//EntityList[id].Energy = EntityList[i].Energy;
				EntityList[id].Colour = EntityList[i].Colour;
				EntityList[i].Energy = 0;
				EntityList[i].Alive = 0;
				EntityList[i].ToRemove = 1;
				factions[int(EntityList[i].Affiliation)].NestCount++;
				if(any(isinf(EntityList[id].Position)) || any(isnan(EntityList[id].Position))){
					EntityList[id].Position = vec2(0,0);
					EntityList[id].PositionOld = vec2(0,0);
					EntityList[id].ToRemove = 1;
					EntityList[id].Alive = 0;
				}
				memoryBarrier();
			}
		}
	}

	if (EntityList[i].Attacked != -1)
	{
			vec2 dir = EntityList[i].Position - EntityList[int(EntityList[i].Attacked)].Position;
			PlacePheremone(i,PheremoneAttack,-vec3(normalize(dir.xy) * 5,0));
			EntityList[i].Attacked = -1;
	}
	PlacePheremoneScent(i,2,1,0.01);
}

void ExecuteBehaviourNest(uint i)
{
	//Ant spawn rate
	if(int(EntityList[i].Alive) == 1)
	{
		int aff = int(EntityList[i].Affiliation);
		EntityList[i].Age += dt;
		int spawncount = int(factions[aff].AntSpawnRate * 0.8 *
			pow(
			abs(random(vec2(EntityList[i].Energy * 100 + (1 + i) + RandomTimeSeed * 10321.1,(1 + i) + RandomTimeSeed * 101.1)))
			,3) * 50);
		//int spawncount = int(abs(random(vec2(EntityList[i].Energy * 100 + (1 + i) + RandomTimeSeed * 10321.1,(1 + i) + RandomTimeSeed * 101.1))) * 50);
		//if(random(vec2(EntityList[i].Energy * 100 + (1 + i) + RandomTimeSeed * 10321.1,(1 + i) + RandomTimeSeed * 101.1)) < 1)
		for(int k = 0;k < spawncount;++k)
		{
			if(EntityList[i].Energy > 5000)
			{
				if(!any(isinf(EntityList[i].Position)) && !any(isnan(EntityList[i].Position))){
					int id = AddEntity(0);
					if(id != -1)
					{
						float ang = random(vec2(i + k,2 * i) + RandomTimeSeed) * 3.14 * 2;
						float dist = 1.1 + (0.1*abs(random(vec2(i * 3 + k,k + 2 * i) + 9.2 * RandomTimeSeed)));
						vec2 displacement = vec2(cos(ang),sin(ang)) * dist * EntityList[i].Size;
						CreateAnt(id);
						memoryBarrier();
						//TODO: Analyse nan
						EntityList[id].Position = EntityList[i].Position + displacement;
						EntityList[id].PositionOld = EntityList[id].Position - (dt * displacement * 0.1);
						EntityList[id].Affiliation = EntityList[i].Affiliation;
						EntityList[i].Energy -= EntityList[id].Energy;
						EntityList[id].Colour = EntityList[i].Colour;
						EntityList[id].AudioFlags = int(EntityList[id].AudioFlags) | (1<<0);
						atomicAdd(factions[aff].AntCount,1);

						if(any(isinf(EntityList[id].Position)) || any(isnan(EntityList[id].Position))){
							EntityList[id].Position = vec2(0,0);
							EntityList[id].PositionOld = vec2(0,0);
							EntityList[id].ToRemove = 1;
							EntityList[id].Alive = 0;
						}
						memoryBarrier();
					}
				}
			}
		}
		if(EntityList[i].Energy > 10000)
		{
			if(abs(random(vec2(EntityList[i].Energy * 33+ (1 + i) + RandomTimeSeed * 1.3,(1 + i) + RandomTimeSeed * 901.1))) < 0.01 * factions[aff].NestSpawnRate)
			{
				if(!any(isinf(EntityList[i].Position)) && !any(isnan(EntityList[i].Position))){
					int id = AddEntity(0);
					if(id != -1)
					{
						float ang = random(vec2(i,2 * i) + RandomTimeSeed) * 3.14 * 2;
						float dist = 1.1 + (0.1*abs(random(vec2(i * 3 , 2 * i) + 9.2 * RandomTimeSeed)));
						vec2 displacement = vec2(cos(ang),sin(ang)) * dist * EntityList[i].Size;
						CreateQueen(id);
						memoryBarrier();
						//TODO: Analyse nan
						EntityList[id].Position = EntityList[i].Position + displacement;
						EntityList[id].PositionOld = EntityList[id].Position - (dt * displacement * 0.1);
						EntityList[id].Affiliation = EntityList[i].Affiliation;
						EntityList[i].Energy -= 8000;
						EntityList[id].Colour = EntityList[i].Colour;
						atomicAdd(factions[aff].NestCount,1);
						EntityList[id].AudioFlags = int(EntityList[id].AudioFlags) | (1<<0);

						if(any(isinf(EntityList[id].Position)) || any(isnan(EntityList[id].Position))){
							EntityList[id].Position = vec2(0,0);
							EntityList[id].PositionOld = vec2(0,0);
							EntityList[id].ToRemove = 1;
							EntityList[id].Alive = 0;
						}
						memoryBarrier();
					}
				}
			}
		}
		int size = int(floor(EntityList[i].Size/PheremoneResolution));
		for(int x = -size;x <= size;++x)
		{
			for(int y = -size;y <= size;++y)
			{
				ivec2 v = ivec2(x,y);
				if((x != 0 || y != 0) && dot(v,v) * PheremoneResolution * PheremoneResolution < EntityList[i].Size * EntityList[i].Size)
				{
					vec3 val = imageLoad(PheremoneHome,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) - v),int(EntityList[i].Affiliation))).xyz;
					val.xy += normalize(v.xy) * PheremoneResolution * 0.1;
					imageStore(PheremoneHome,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) - v),int(EntityList[i].Affiliation)),vec4(val,1));
				}
			}
		}
	}
	else{
//		int size = int(floor(EntityList[i].Size/PheremoneResolution));
//		for(int x = -size;x <= size;++x)
//		{
//			for(int y = -size;y <= size;++y)
//			{
//				if(x != 0 && y != 0){
//					vec3 v = vec3(-x,-y,0);
//					vec3 val = imageLoad(PheremoneHome,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) + ivec2(x,y)),int(0))).xyz;
//					val.xy *= 0.5;
//					imageStore(PheremoneHome,ivec3(WrapPhermoneGrid(GetPheremoneGrid(EntityList[i].Position) + ivec2(x,y)),int(0)),vec4(val,1));
//				}
//			}
//		}
	}
}
void ExecuteBehaviourPrey(uint i)
{
	if(EntityList[i].Alive == 1)
	{
		FollowPhermomonScent(i,0,20,-90);
		FollowPhermomonScent(i,1,10,-100);
		const float FoodGrowthRate = 5;
		memoryBarrier();
		EntityList[i].Energy += FoodGrowthRate * EntityList[i].Size * dt;
		const float EnergyPerSecond = 10;
		memoryBarrier();
		const float Density = 0.1;
		const float EnergySize = 0.1;
		EntityList[i].Mass = Density * EntityList[i].Size * EntityList[i].Size;
		EntityList[i].Size = 50 * EntityList[i].Energy / EntityList[i].MaxEnergy;

		float EnergyThresh = EntityList[i].MaxEnergy * 0.5;
		float EnergyCost = 500;
		if(EntityList[i].Energy > EnergyThresh && EntityList[i].Age > 10 && EntityList[i].Age < 60)
		{
			if(abs(random(vec2((1 + i) + RandomTimeSeed * 10321.1,(2 + i)*100 + RandomTimeSeed * 101.1))) < 0.0000001)
			{
				if(!any(isinf(EntityList[i].Position)) && !any(isnan(EntityList[i].Position))){
					int id = AddEntity(2);
					if(id != -1)
					{
						CreatePrey(id);
						memoryBarrier();
						float MaxE = EnergyCost;
						EntityList[id].Energy = MaxE;
						EntityList[id].MaxEnergy = EntityList[id].MaxEnergy;
						EntityList[id].Size = 1;
						EntityList[id].Mass = 1;
						EntityList[id].AudioFlags = int(EntityList[id].AudioFlags) | (1<<0);
						float ang = random(vec2(i,2 * i) + RandomTimeSeed) * 3.14 * 2;
						float dist = 1 + 0;
						vec2 displacement = vec2(cos(ang),sin(ang)) * dist * (EntityList[i].Size + EntityList[id].Size);
						vec2 newpos = EntityList[i].Position + displacement;
						EntityList[id].Position = newpos;
						EntityList[id].PositionOld = newpos;
						memoryBarrier();
					}
				}
			}
		}
	}
	vec2 Position = EntityList[i].Position;
	if(any(isinf(Position)) || any(isnan(Position))){
		Position = vec2(0,0);
	}
	PlacePheremoneScent(i,0,1,10);
}
void ExecuteBehaviourPredator(uint i)
{
	if(EntityList[i].Alive == 1)
	{
		RandomWalk(i,100,0.01);
		if(abs(EntityList[i].MaxEnergy - EntityList[i].Energy) > 100)
		{
			FollowPhermomonScent(i,0,20,200);
			FollowPhermomonScent(i,2,20,200);
		}
		FollowPhermomonScent(i,1,10,-100);
		FollowPhermomonScent(i,3,10,100);
		float EnergyThresh = (EntityList[i].MaxEnergy * 0.5);
		if(EntityList[i].Energy > EnergyThresh)// && EntityList[i].Age < 80 && EntityList[i].Age > 10)
		{
//			if(abs(random(vec2((1 + i) + RandomTimeSeed * 10321.1 + EntityList[i].Energy,(2 + i)*100 + RandomTimeSeed * 101.1))) < 0.0000001)
			{
				if(!any(isinf(EntityList[i].Position)) && !any(isnan(EntityList[i].Position))){
					int id = AddEntity(4);
					if(id != -1)
					{
						float ang = random(vec2(i,2 * i) + RandomTimeSeed) * 3.14 * 2;
						float dist = 1 + (0.1*abs(random(vec2(i,2 * i) + 9.2 * RandomTimeSeed)));
						vec2 displacement = vec2(cos(ang),sin(ang)) * dist * 2 * EntityList[i].Size;
						CreatePredator(id);
						memoryBarrier();
						//TODO: Analyse nan
						EntityList[id].Position = EntityList[i].Position + displacement;
						EntityList[id].PositionOld = EntityList[i].Position + displacement;
						EntityList[i].Energy -= EnergyThresh * 0.8;
						EntityList[id].AudioFlags = int(EntityList[id].AudioFlags) | (1<<0);
						if(any(isinf(EntityList[id].Position)) || any(isnan(EntityList[id].Position))){
						EntityList[id].Position = vec2(0,0);
						EntityList[id].PositionOld = vec2(0,0);
						EntityList[id].ToRemove = 1;
						EntityList[id].Alive = 0;
						}
						memoryBarrier();
						//EntityList[id].Affiliation = EntityList[i].Affiliation;
						//EntityList[id].Colour = EntityList[i].Colour;
					}
				}
			}
		}
	}
	PlacePheremoneScent(i,1,1.5,10);
}

void ExecuteBehaviour(uint i)
{
	int Type = int(EntityList[i].Type);
	switch(Type) {
		case 0:
			ExecuteBehaviourAnt(i);		
			break;
		case 1:
			ExecuteBehaviourNest(i);		
			break;
		case 2:
			ExecuteBehaviourPrey(i);		
			break;
		case 3:
			ExecuteBehaviourPredator(i);		
			break;
	}
}
void main()
{
    uint i = gl_GlobalInvocationID.x;

	//ApplyFriction(i);
	if(i < gpuscene.EntityCount && i < MaxEntityCount)
	{
		if(EntityList[i].Type != 4)
		{
			if(EntityList[i].ToRemove != 1){
				ExecuteBehaviour(i);
			}
		}
	}
}